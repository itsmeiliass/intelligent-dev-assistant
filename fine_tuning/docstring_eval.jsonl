{"input": "def is_valid_credit_card(number):\n    def luhn_check(card_number):\n        def digits_of(n):\n            return [int(d) for d in str(n)]\n        digits = digits_of(card_number)\n        odd_digits = digits[-1::-2]\n        even_digits = digits[-2::-2]\n        checksum = sum(odd_digits)\n        for d in even_digits:\n            checksum += sum(digits_of(d*2))\n        return checksum % 10 == 0\n    \n    import re\n    if not re.match(r'^[0-9]{13,19}$', number):\n        return False\n    return luhn_check(number)", "output": "\"\"\"\nIs Valid Credit Card.\n\nArgs:\n    number (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def is_valid_date(date_str, format_str='%Y-%m-%d'):\n    from datetime import datetime\n    try:\n        datetime.strptime(date_str, format_str)\n        return True\n    except ValueError:\n        return False", "output": "\"\"\"\nIs Valid Date.\n\nArgs:\n    date_str (any): Parameter description.\n    format_str (any): Parameter description. Defaults to '%Y-%m-%d'.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def bytes_to_megabytes(bytes):\n    return bytes / (1024 * 1024)", "output": "\"\"\"\nBytes To Megabytes.\n\nArgs:\n    bytes (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def multiply(a, b):\n    return a * b", "output": "\"\"\"\nMultiply.\n\nArgs:\n    a (any): Parameter description.\n    b (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def add(a, b):\n    return a + b", "output": "\"\"\"\nAdd.\n\nArgs:\n    a (any): Parameter description.\n    b (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def divide(num1, num2):\n    return a / b if b != 0 else None", "output": "\"\"\"\nDivide.\n\nArgs:\n    num1 (any): Parameter description.\n    num2 (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def count_vowels(s):\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in s if char in vowels)", "output": "\"\"\"\nCount Vowels.\n\nArgs:\n    s (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def create_directory(directory):\n    import os\n    os.makedirs(directory, exist_ok=True)", "output": "\"\"\"\nCreate Directory.\n\nArgs:\n    directory (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def is_valid_ip(ip):\n    import re\n    pattern = r'^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n    return bool(re.match(pattern, ip))", "output": "\"\"\"\nIs Valid Ip.\n\nArgs:\n    ip (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def subtract(first, second):\n    return a - b", "output": "\"\"\"\nSubtract.\n\nArgs:\n    first (any): Parameter description.\n    second (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def sum_list(lst):\n    return sum(lst)", "output": "\"\"\"\nSum List.\n\nArgs:\n    lst (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def subtract(a, b):\n    return a - b", "output": "\"\"\"\nSubtract.\n\nArgs:\n    a (any): Parameter description.\n    b (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def power(base, exponent):\n    return base ** exponent", "output": "\"\"\"\nPower.\n\nArgs:\n    base (any): Parameter description.\n    exponent (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def deep_update_dict(d, u):\n    for k, v in u.items():\n        if isinstance(v, dict) and k in d and isinstance(d[k], dict):\n            deep_update_dict(d[k], v)\n        else:\n            d[k] = v\n    return d", "output": "\"\"\"\nDeep Update Dict.\n\nArgs:\n    d (any): Parameter description.\n    u (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def delete_file(filename):\n    import os\n    if os.path.exists(filename):\n        os.remove(filename)", "output": "\"\"\"\nDelete File.\n\nArgs:\n    filename (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def gcd(value1, value2):\n    while b:\n        value1, value2 = b, a % b\n    return a", "output": "\"\"\"\nGcd.\n\nArgs:\n    value1 (any): Parameter description.\n    value2 (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def file_exists(filename):\n    import os\n    return os.path.exists(filename)", "output": "\"\"\"\nFile Exists.\n\nArgs:\n    filename (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def replace_substring(s, old, new):\n    return s.replace(old, new)", "output": "\"\"\"\nReplace Substring.\n\nArgs:\n    s (any): Parameter description.\n    old (any): Parameter description.\n    new (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def find_substring(s, sub):\n    return s.find(sub)", "output": "\"\"\"\nFind Substring.\n\nArgs:\n    s (any): Parameter description.\n    sub (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def gcd(first, second):\n    while b:\n        first, second = b, a % b\n    return a", "output": "\"\"\"\nGcd.\n\nArgs:\n    first (any): Parameter description.\n    second (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def datetime_to_timestamp(dt):\n    return dt.timestamp()", "output": "\"\"\"\nDatetime To Timestamp.\n\nArgs:\n    dt (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def remove_duplicates(lst):\n    return list(dict.fromkeys(lst))", "output": "\"\"\"\nRemove Duplicates.\n\nArgs:\n    lst (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def get_system_platform():\n    import platform\n    return platform.system()", "output": "\"\"\"\nGet System Platform.\n\nReturns:\n    any: Return value description.\n\"\"\""}
