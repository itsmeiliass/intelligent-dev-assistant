{"input": "def measure_execution_time(func, *args, **kwargs):\n    import time\n    start = time.time()\n    result = func(*args, **kwargs)\n    end = time.time()\n    return result, end - start", "output": "\"\"\"\nMeasure Execution Time.\n\nArgs:\n    func (any): Parameter description.\n    *args (any): Parameter description.\n    **kwargs (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def remove_whitespace(s):\n    return ''.join(s.split())", "output": "\"\"\"\nRemove Whitespace.\n\nArgs:\n    s (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def find_max(lst):\n    return max(lst) if lst else None", "output": "\"\"\"\nFind Max.\n\nArgs:\n    lst (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def timestamp_to_datetime(ts):\n    from datetime import datetime\n    return datetime.fromtimestamp(ts)", "output": "\"\"\"\nTimestamp To Datetime.\n\nArgs:\n    ts (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def is_valid_time(time_str, format_str='%H:%M:%S'):\n    from datetime import datetime\n    try:\n        datetime.strptime(time_str, format_str)\n        return True\n    except ValueError:\n        return False", "output": "\"\"\"\nIs Valid Time.\n\nArgs:\n    time_str (any): Parameter description.\n    format_str (any): Parameter description. Defaults to '%H:%M:%S'.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def fahrenheit_to_celsius(f):\n    return (f - 32) * 5/9", "output": "\"\"\"\nFahrenheit To Celsius.\n\nArgs:\n    f (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def kilometers_to_miles(km):\n    return km * 0.621371", "output": "\"\"\"\nKilometers To Miles.\n\nArgs:\n    km (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True", "output": "\"\"\"\nIs Prime.\n\nArgs:\n    n (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def add_days_to_date(dt, days):\n    from datetime import timedelta\n    return dt + timedelta(days=days)", "output": "\"\"\"\nAdd Days To Date.\n\nArgs:\n    dt (any): Parameter description.\n    days (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def sort_dict_by_key(d, reverse=False):\n    return dict(sorted(d.items(), key=lambda x: x[0], reverse=reverse))", "output": "\"\"\"\nSort Dict By Key.\n\nArgs:\n    d (any): Parameter description.\n    reverse (any): Parameter description. Defaults to False.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def write_file(filename, content):\n    with open(filename, 'w') as f:\n        f.write(content)", "output": "\"\"\"\nWrite File.\n\nArgs:\n    filename (any): Parameter description.\n    content (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def sqrt(number):\n    return number ** 0.5", "output": "\"\"\"\nSqrt.\n\nArgs:\n    number (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def is_leap_year(year):\n    return (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0)", "output": "\"\"\"\nIs Leap Year.\n\nArgs:\n    year (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def count_occurrences(lst, item):\n    return lst.count(item)", "output": "\"\"\"\nCount Occurrences.\n\nArgs:\n    lst (any): Parameter description.\n    item (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def reverse_string(s):\n    return s[::-1]", "output": "\"\"\"\nReverse String.\n\nArgs:\n    s (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def get_current_username():\n    import getpass\n    return getpass.getuser()", "output": "\"\"\"\nGet Current Username.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def append_to_file(filename, content):\n    with open(filename, 'a') as f:\n        f.write(content)", "output": "\"\"\"\nAppend To File.\n\nArgs:\n    filename (any): Parameter description.\n    content (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def liters_to_gallons(liters):\n    return liters * 0.264172", "output": "\"\"\"\nLiters To Gallons.\n\nArgs:\n    liters (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def is_valid_json(json_str):\n    import json\n    try:\n        json.loads(json_str)\n        return True\n    except ValueError:\n        return False", "output": "\"\"\"\nIs Valid Json.\n\nArgs:\n    json_str (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def find_min(lst):\n    return min(lst) if lst else None", "output": "\"\"\"\nFind Min.\n\nArgs:\n    lst (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def gallons_to_liters(gallons):\n    return gallons * 3.78541", "output": "\"\"\"\nGallons To Liters.\n\nArgs:\n    gallons (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def filter_dict_by_keys(d, keys):\n    return {k: v for k, v in d.items() if k in keys}", "output": "\"\"\"\nFilter Dict By Keys.\n\nArgs:\n    d (any): Parameter description.\n    keys (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def subtract(num1, num2):\n    return a - b", "output": "\"\"\"\nSubtract.\n\nArgs:\n    num1 (any): Parameter description.\n    num2 (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def gcd(num1, num2):\n    while b:\n        num1, num2 = b, a % b\n    return a", "output": "\"\"\"\nGcd.\n\nArgs:\n    num1 (any): Parameter description.\n    num2 (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def add(x, y):\n    return a + b", "output": "\"\"\"\nAdd.\n\nArgs:\n    x (any): Parameter description.\n    y (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def dict_to_list_of_tuples(d):\n    return list(d.items())", "output": "\"\"\"\nDict To List Of Tuples.\n\nArgs:\n    d (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def list_files(directory):\n    import os\n    return [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]", "output": "\"\"\"\nList Files.\n\nArgs:\n    directory (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def pounds_to_kilograms(lb):\n    return lb * 0.453592", "output": "\"\"\"\nPounds To Kilograms.\n\nArgs:\n    lb (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def date_diff(date1, date2):\n    return abs((date1 - date2).days)", "output": "\"\"\"\nDate Diff.\n\nArgs:\n    date1 (any): Parameter description.\n    date2 (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def multiply(num1, num2):\n    return a * b", "output": "\"\"\"\nMultiply.\n\nArgs:\n    num1 (any): Parameter description.\n    num2 (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def get_environment_variable(name):\n    import os\n    return os.environ.get(name)", "output": "\"\"\"\nGet Environment Variable.\n\nArgs:\n    name (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def miles_to_kilometers(miles):\n    return miles * 1.60934", "output": "\"\"\"\nMiles To Kilometers.\n\nArgs:\n    miles (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def get_python_version():\n    import sys\n    return sys.version", "output": "\"\"\"\nGet Python Version.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def is_valid_phone(phone):\n    import re\n    pattern = r'^\\+?[1-9]\\d{1,14}$'\n    return bool(re.match(pattern, phone))", "output": "\"\"\"\nIs Valid Phone.\n\nArgs:\n    phone (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def lcm(value1, value2):\n    return abs(a*b) // gcd(value1, value2) if a and b else 0", "output": "\"\"\"\nLcm.\n\nArgs:\n    value1 (any): Parameter description.\n    value2 (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def shuffle_list(lst):\n    import random\n    random.shuffle(lst)\n    return lst", "output": "\"\"\"\nShuffle List.\n\nArgs:\n    lst (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def get_day_of_week(dt):\n    return dt.strftime('%A')", "output": "\"\"\"\nGet Day Of Week.\n\nArgs:\n    dt (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def celsius_to_fahrenheit(c):\n    return (c * 9/5) + 32", "output": "\"\"\"\nCelsius To Fahrenheit.\n\nArgs:\n    c (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def subtract(value1, value2):\n    return a - b", "output": "\"\"\"\nSubtract.\n\nArgs:\n    value1 (any): Parameter description.\n    value2 (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def list_to_string(lst, delimiter=','):\n    return delimiter.join(str(x) for x in lst)", "output": "\"\"\"\nList To String.\n\nArgs:\n    lst (any): Parameter description.\n    delimiter (any): Parameter description. Defaults to '.\n    ' (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def merge_dicts(d1, d2):\n    result = d1.copy()\n    result.update(d2)\n    return result", "output": "\"\"\"\nMerge Dicts.\n\nArgs:\n    d1 (any): Parameter description.\n    d2 (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def sort_dict_by_value(d, reverse=False):\n    return dict(sorted(d.items(), key=lambda x: x[1], reverse=reverse))", "output": "\"\"\"\nSort Dict By Value.\n\nArgs:\n    d (any): Parameter description.\n    reverse (any): Parameter description. Defaults to False.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def is_valid_email(email):\n    import re\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    return bool(re.match(pattern, email))", "output": "\"\"\"\nIs Valid Email.\n\nArgs:\n    email (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def generate_random_number(min_val=0, max_val=100):\n    import random\n    return random.randint(min_val, max_val)", "output": "\"\"\"\nGenerate Random Number.\n\nArgs:\n    min_val (any): Parameter description. Defaults to 0.\n    max_val (any): Parameter description. Defaults to 100.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def parse_datetime(dt_str, format_str='%Y-%m-%d %H:%M:%S'):\n    from datetime import datetime\n    return datetime.strptime(dt_str, format_str)", "output": "\"\"\"\nParse Datetime.\n\nArgs:\n    dt_str (any): Parameter description.\n    format_str (any): Parameter description. Defaults to '%Y-%m-%d %H:%M:%S'.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def factorial(n):\n    if n <= 1:\n        return 1\n    return n * factorial(n-1)", "output": "\"\"\"\nFactorial.\n\nArgs:\n    n (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def rotate_list(lst, n):\n    n = n % len(lst)\n    return lst[-n:] + lst[:-n]", "output": "\"\"\"\nRotate List.\n\nArgs:\n    lst (any): Parameter description.\n    n (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def chunk_list(lst, size):\n    return [lst[i:i+size] for i in range(0, len(lst), size)]", "output": "\"\"\"\nChunk List.\n\nArgs:\n    lst (any): Parameter description.\n    size (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def lcm(a, b):\n    return abs(a*b) // gcd(a, b) if a and b else 0", "output": "\"\"\"\nLcm.\n\nArgs:\n    a (any): Parameter description.\n    b (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def generate_random_string(length=8):\n    import random\n    import string\n    return ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(length))", "output": "\"\"\"\nGenerate Random String.\n\nArgs:\n    length (any): Parameter description. Defaults to 8.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def get_dict_values(d):\n    return list(d.values())", "output": "\"\"\"\nGet Dict Values.\n\nArgs:\n    d (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def set_environment_variable(name, value):\n    import os\n    os.environ[name] = value", "output": "\"\"\"\nSet Environment Variable.\n\nArgs:\n    name (any): Parameter description.\n    value (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def read_file(filename):\n    with open(filename, 'r') as f:\n        return f.read()", "output": "\"\"\"\nRead File.\n\nArgs:\n    filename (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def gcd(x, y):\n    while b:\n        x, y = b, a % b\n    return a", "output": "\"\"\"\nGcd.\n\nArgs:\n    x (any): Parameter description.\n    y (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def retry_operation(operation, max_attempts=3, delay=1):\n    import time\n    for attempt in range(max_attempts):\n        try:\n            return operation()\n        except Exception as e:\n            if attempt == max_attempts - 1:\n                raise e\n            time.sleep(delay)", "output": "\"\"\"\nRetry Operation.\n\nArgs:\n    operation (any): Parameter description.\n    max_attempts (any): Parameter description. Defaults to 3.\n    delay (any): Parameter description. Defaults to 1.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def megabytes_to_gigabytes(mb):\n    return mb / 1024", "output": "\"\"\"\nMegabytes To Gigabytes.\n\nArgs:\n    mb (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def divide(first, second):\n    return a / b if b != 0 else None", "output": "\"\"\"\nDivide.\n\nArgs:\n    first (any): Parameter description.\n    second (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def multiply(x, y):\n    return a * b", "output": "\"\"\"\nMultiply.\n\nArgs:\n    x (any): Parameter description.\n    y (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def count_words(s):\n    return len(s.split())", "output": "\"\"\"\nCount Words.\n\nArgs:\n    s (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def filter_even_numbers(lst):\n    return [x for x in lst if x % 2 == 0]", "output": "\"\"\"\nFilter Even Numbers.\n\nArgs:\n    lst (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def lcm(first, second):\n    return abs(a*b) // gcd(first, second) if a and b else 0", "output": "\"\"\"\nLcm.\n\nArgs:\n    first (any): Parameter description.\n    second (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def string_to_list(s, delimiter=','):\n    return s.split(delimiter)", "output": "\"\"\"\nString To List.\n\nArgs:\n    s (any): Parameter description.\n    delimiter (any): Parameter description. Defaults to '.\n    ' (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def is_valid_url(url):\n    import re\n    pattern = r'^https?:\\/\\/(?:www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b(?:[-a-zA-Z0-9()@:%_\\+.~#?&\\/=]*)$'\n    return bool(re.match(pattern, url))", "output": "\"\"\"\nIs Valid Url.\n\nArgs:\n    url (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def get_file_size(filename):\n    import os\n    return os.path.getsize(filename)", "output": "\"\"\"\nGet File Size.\n\nArgs:\n    filename (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def flatten(nested_list):\n    result = []\n    for item in nested_list:\n        if isinstance(item, list):\n            result.extend(flatten(item))\n        else:\n            result.append(item)\n    return result", "output": "\"\"\"\nFlatten.\n\nArgs:\n    nested_list (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def is_palindrome(s):\n    s = ''.join(c for c in s if c.isalnum()).lower()\n    return s == s[::-1]", "output": "\"\"\"\nIs Palindrome.\n\nArgs:\n    s (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def is_valid_password(password):\n    if len(password) < 8:\n        return False\n    if not any(char.isupper() for char in password):\n        return False\n    if not any(char.islower() for char in password):\n        return False\n    if not any(char.isdigit() for char in password):\n        return False\n    return True", "output": "\"\"\"\nIs Valid Password.\n\nArgs:\n    password (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def get_current_datetime():\n    from datetime import datetime\n    return datetime.now()", "output": "\"\"\"\nGet Current Datetime.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def lcm(num1, num2):\n    return abs(a*b) // gcd(num1, num2) if a and b else 0", "output": "\"\"\"\nLcm.\n\nArgs:\n    num1 (any): Parameter description.\n    num2 (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def average(lst):\n    return sum(lst) / len(lst) if lst else 0", "output": "\"\"\"\nAverage.\n\nArgs:\n    lst (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def add(num1, num2):\n    return a + b", "output": "\"\"\"\nAdd.\n\nArgs:\n    num1 (any): Parameter description.\n    num2 (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def capitalize_words(s):\n    return ' '.join(word.capitalize() for word in s.split())", "output": "\"\"\"\nCapitalize Words.\n\nArgs:\n    s (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def divide(a, b):\n    return a / b if b != 0 else None", "output": "\"\"\"\nDivide.\n\nArgs:\n    a (any): Parameter description.\n    b (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def kilograms_to_pounds(kg):\n    return kg * 2.20462", "output": "\"\"\"\nKilograms To Pounds.\n\nArgs:\n    kg (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def list_of_tuples_to_dict(lst):\n    return dict(lst)", "output": "\"\"\"\nList Of Tuples To Dict.\n\nArgs:\n    lst (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def add(first, second):\n    return a + b", "output": "\"\"\"\nAdd.\n\nArgs:\n    first (any): Parameter description.\n    second (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def format_datetime(dt, format_str='%Y-%m-%d %H:%M:%S'):\n    return dt.strftime(format_str)", "output": "\"\"\"\nFormat Datetime.\n\nArgs:\n    dt (any): Parameter description.\n    format_str (any): Parameter description. Defaults to '%Y-%m-%d %H:%M:%S'.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def subtract(x, y):\n    return a - b", "output": "\"\"\"\nSubtract.\n\nArgs:\n    x (any): Parameter description.\n    y (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def divide(value1, value2):\n    return a / b if b != 0 else None", "output": "\"\"\"\nDivide.\n\nArgs:\n    value1 (any): Parameter description.\n    value2 (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a", "output": "\"\"\"\nGcd.\n\nArgs:\n    a (any): Parameter description.\n    b (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def list_directories(directory):\n    import os\n    return [d for d in os.listdir(directory) if os.path.isdir(os.path.join(directory, d))]", "output": "\"\"\"\nList Directories.\n\nArgs:\n    directory (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def invert_dict(d):\n    return {v: k for k, v in d.items()}", "output": "\"\"\"\nInvert Dict.\n\nArgs:\n    d (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def add(value1, value2):\n    return a + b", "output": "\"\"\"\nAdd.\n\nArgs:\n    value1 (any): Parameter description.\n    value2 (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def is_valid_xml(xml_str):\n    try:\n        import xml.etree.ElementTree as ET\n        ET.fromstring(xml_str)\n        return True\n    except ET.ParseError:\n        return False", "output": "\"\"\"\nIs Valid Xml.\n\nArgs:\n    xml_str (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def multiply(value1, value2):\n    return a * b", "output": "\"\"\"\nMultiply.\n\nArgs:\n    value1 (any): Parameter description.\n    value2 (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def lcm(x, y):\n    return abs(a*b) // gcd(x, y) if a and b else 0", "output": "\"\"\"\nLcm.\n\nArgs:\n    x (any): Parameter description.\n    y (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def get_week_number(dt):\n    return dt.isocalendar()[1]", "output": "\"\"\"\nGet Week Number.\n\nArgs:\n    dt (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def get_file_extension(filename):\n    import os\n    return os.path.splitext(filename)[1]", "output": "\"\"\"\nGet File Extension.\n\nArgs:\n    filename (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def get_dict_keys(d):\n    return list(d.keys())", "output": "\"\"\"\nGet Dict Keys.\n\nArgs:\n    d (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def multiply(first, second):\n    return a * b", "output": "\"\"\"\nMultiply.\n\nArgs:\n    first (any): Parameter description.\n    second (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
{"input": "def divide(x, y):\n    return a / b if b != 0 else None", "output": "\"\"\"\nDivide.\n\nArgs:\n    x (any): Parameter description.\n    y (any): Parameter description.\n\nReturns:\n    any: Return value description.\n\"\"\""}
