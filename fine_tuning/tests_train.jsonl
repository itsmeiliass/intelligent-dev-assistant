{"input": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True", "output": "import pytest\n\n\ndef test_is_prime():\n    assert is_prime(2) is True\n    assert is_prime(4) is False\n    assert is_prime(17) is True\n"}
{"input": "def find_min(lst):\n    return min(lst) if lst else None", "output": "import pytest\n\n\ndef test_find_min():\n    assert find_min([5, 2, 8, 1, 9]) == 1\n    assert find_min([]) is None\n"}
{"input": "def average(lst):\n    return sum(lst) / len(lst) if lst else 0", "output": "import pytest\n\n\ndef test_average():\n    assert average([1, 2, 3, 4, 5]) == 3\n    assert average([]) == 0\n"}
{"input": "def factorial(n):\n    if n <= 1:\n        return 1\n    return n * factorial(n-1)", "output": "import pytest\n\n\ndef test_factorial():\n    assert factorial(0) == 1\n    assert factorial(5) == 120\n"}
{"input": "def power(base, exponent):\n    return base ** exponent", "output": "import pytest\n\n\ndef test_power():\n    assert power(2, 3) == 8\n    assert power(5, 0) == 1\n"}
{"input": "def find_max(lst):\n    return max(lst) if lst else None", "output": "import pytest\n\n\ndef test_find_max():\n    assert find_max([1, 5, 3, 9, 2]) == 9\n    assert find_max([]) is None\n"}
{"input": "def remove_duplicates(lst):\n    return list(dict.fromkeys(lst))", "output": "import pytest\n\n\ndef test_remove_duplicates():\n    assert remove_duplicates([1, 2, 2, 3, 3, 3]) == [1, 2, 3]\n    assert remove_duplicates([]) == []\n"}
{"input": "def find_min(lst):\n    return min(lst) if lst else None", "output": "import pytest\n\n\ndef test_find_min():\n    assert find_min([5, 2, 8, 1, 9]) == 1\n    assert find_min([]) is None\n"}
{"input": "def multiply(num1, num2):\n    return a * b", "output": "import pytest\n\n\ndef test_multiply():\n    assert multiply(3, 4) == 12\n    assert multiply(-2, 3) == -6\n"}
{"input": "def celsius_to_fahrenheit(c):\n    return (c * 9/5) + 32", "output": "import pytest\n\n\ndef test_celsius_to_fahrenheit():\n    assert celsius_to_fahrenheit(0) == 32\n    assert celsius_to_fahrenheit(100) == 212\n"}
{"input": "def count_vowels(s):\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in s if char in vowels)", "output": "import pytest\n\n\ndef test_count_vowels():\n    assert count_vowels('hello') == 2\n    assert count_vowels('xyz') == 0\n"}
{"input": "def merge_dicts(d1, d2):\n    result = d1.copy()\n    result.update(d2)\n    return result", "output": "import pytest\n\n\ndef test_merge_dicts():\n    assert merge_dicts({'a': 1}, {'b': 2}) == {'a': 1, 'b': 2}\n    assert merge_dicts({}, {'a': 1}) == {'a': 1}\n"}
{"input": "def capitalize_words(s):\n    return ' '.join(word.capitalize() for word in s.split())", "output": "import pytest\n\n\ndef test_capitalize_words():\n    assert capitalize_words('hello world') == 'Hello World'\n    assert capitalize_words('') == ''\n"}
{"input": "def is_valid_email(email):\n    import re\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    return bool(re.match(pattern, email))", "output": "import pytest\n\n\ndef test_is_valid_email():\n    assert is_valid_email('test@example.com') is True\n    assert is_valid_email('invalid') is False\n"}
{"input": "def invert_dict(d):\n    return {v: k for k, v in d.items()}", "output": "import pytest\n\n\ndef test_invert_dict():\n    assert invert_dict({'a': 1, 'b': 2}) == {1: 'a', 2: 'b'}\n    assert invert_dict({}) == {}\n"}
{"input": "def remove_duplicates(lst):\n    return list(dict.fromkeys(lst))", "output": "import pytest\n\n\ndef test_remove_duplicates():\n    assert remove_duplicates([1, 2, 2, 3, 3, 3]) == [1, 2, 3]\n    assert remove_duplicates([]) == []\n"}
{"input": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True", "output": "import pytest\n\n\ndef test_is_prime():\n    assert is_prime(2) is True\n    assert is_prime(4) is False\n    assert is_prime(17) is True\n"}
{"input": "def sqrt(number):\n    return number ** 0.5", "output": "import pytest\n\n\ndef test_sqrt():\n    assert sqrt(9) == 3\n    assert sqrt(16) == 4\n"}
{"input": "def merge_dicts(d1, d2):\n    result = d1.copy()\n    result.update(d2)\n    return result", "output": "import pytest\n\n\ndef test_merge_dicts():\n    assert merge_dicts({'a': 1}, {'b': 2}) == {'a': 1, 'b': 2}\n    assert merge_dicts({}, {'a': 1}) == {'a': 1}\n"}
{"input": "def power(base, exponent):\n    return base ** exponent", "output": "import pytest\n\n\ndef test_power():\n    assert power(2, 3) == 8\n    assert power(5, 0) == 1\n"}
{"input": "def multiply(a, b):\n    return a * b", "output": "import pytest\n\n\ndef test_multiply():\n    assert multiply(3, 4) == 12\n    assert multiply(-2, 3) == -6\n"}
{"input": "def kilometers_to_miles(km):\n    return km * 0.621371", "output": "import pytest\n\n\ndef test_kilometers_to_miles():\n    assert kilometers_to_miles(10) == pytest.approx(6.21371, 0.001)\n"}
{"input": "def kilometers_to_miles(km):\n    return km * 0.621371", "output": "import pytest\n\n\ndef test_kilometers_to_miles():\n    assert kilometers_to_miles(10) == pytest.approx(6.21371, 0.001)\n"}
{"input": "def divide(num1, num2):\n    return a / b if b != 0 else None", "output": "import pytest\n\n\ndef test_divide():\n    assert divide(10, 2) == 5\n    assert divide(5, 2) == 2.5\n    assert divide(5, 0) is None\n"}
{"input": "def capitalize_words(s):\n    return ' '.join(word.capitalize() for word in s.split())", "output": "import pytest\n\n\ndef test_capitalize_words():\n    assert capitalize_words('hello world') == 'Hello World'\n    assert capitalize_words('') == ''\n"}
{"input": "def is_palindrome(s):\n    s = ''.join(c for c in s if c.isalnum()).lower()\n    return s == s[::-1]", "output": "import pytest\n\n\ndef test_is_palindrome():\n    assert is_palindrome('racecar') is True\n    assert is_palindrome('hello') is False\n"}
{"input": "def merge_dicts(d1, d2):\n    result = d1.copy()\n    result.update(d2)\n    return result", "output": "import pytest\n\n\ndef test_merge_dicts():\n    assert merge_dicts({'a': 1}, {'b': 2}) == {'a': 1, 'b': 2}\n    assert merge_dicts({}, {'a': 1}) == {'a': 1}\n"}
{"input": "def get_environment_variable(name):\n    import os\n    return os.environ.get(name)", "output": "import pytest\n\n\ndef test_get_environment_variable():\n    import os\n    os.environ['TEST_VAR'] = 'test_value'\n    assert get_environment_variable('TEST_VAR') == 'test_value'\n    assert get_environment_variable('NONEXISTENT') is None\n"}
{"input": "def is_valid_email(email):\n    import re\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    return bool(re.match(pattern, email))", "output": "import pytest\n\n\ndef test_is_valid_email():\n    assert is_valid_email('test@example.com') is True\n    assert is_valid_email('invalid') is False\n"}
{"input": "def invert_dict(d):\n    return {v: k for k, v in d.items()}", "output": "import pytest\n\n\ndef test_invert_dict():\n    assert invert_dict({'a': 1, 'b': 2}) == {1: 'a', 2: 'b'}\n    assert invert_dict({}) == {}\n"}
{"input": "def count_vowels(s):\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in s if char in vowels)", "output": "import pytest\n\n\ndef test_count_vowels():\n    assert count_vowels('hello') == 2\n    assert count_vowels('xyz') == 0\n"}
{"input": "def reverse_string(s):\n    return s[::-1]", "output": "import pytest\n\n\ndef test_reverse_string():\n    assert reverse_string('hello') == 'olleh'\n    assert reverse_string('') == ''\n"}
{"input": "def average(lst):\n    return sum(lst) / len(lst) if lst else 0", "output": "import pytest\n\n\ndef test_average():\n    assert average([1, 2, 3, 4, 5]) == 3\n    assert average([]) == 0\n"}
{"input": "def subtract(a, b):\n    return a - b", "output": "import pytest\n\n\ndef test_subtract():\n    assert subtract(5, 3) == 2\n    assert subtract(0, 5) == -5\n"}
{"input": "def reverse_string(s):\n    return s[::-1]", "output": "import pytest\n\n\ndef test_reverse_string():\n    assert reverse_string('hello') == 'olleh'\n    assert reverse_string('') == ''\n"}
{"input": "def fahrenheit_to_celsius(f):\n    return (f - 32) * 5/9", "output": "import pytest\n\n\ndef test_fahrenheit_to_celsius():\n    assert fahrenheit_to_celsius(32) == 0\n    assert fahrenheit_to_celsius(212) == 100\n"}
{"input": "def kilometers_to_miles(km):\n    return km * 0.621371", "output": "import pytest\n\n\ndef test_kilometers_to_miles():\n    assert kilometers_to_miles(10) == pytest.approx(6.21371, 0.001)\n"}
{"input": "def sum_list(lst):\n    return sum(lst)", "output": "import pytest\n\n\ndef test_sum_list():\n    assert sum_list([1, 2, 3, 4]) == 10\n    assert sum_list([]) == 0\n"}
{"input": "def fahrenheit_to_celsius(f):\n    return (f - 32) * 5/9", "output": "import pytest\n\n\ndef test_fahrenheit_to_celsius():\n    assert fahrenheit_to_celsius(32) == 0\n    assert fahrenheit_to_celsius(212) == 100\n"}
{"input": "def count_vowels(s):\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in s if char in vowels)", "output": "import pytest\n\n\ndef test_count_vowels():\n    assert count_vowels('hello') == 2\n    assert count_vowels('xyz') == 0\n"}
{"input": "def generate_random_string(length=8):\n    import random\n    import string\n    return ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(length))", "output": "import pytest\n\n\ndef test_generate_random_string():\n    result = generate_random_string(10)\n    assert len(result) == 10\n    assert isinstance(result, str)\n"}
{"input": "def find_max(lst):\n    return max(lst) if lst else None", "output": "import pytest\n\n\ndef test_find_max():\n    assert find_max([1, 5, 3, 9, 2]) == 9\n    assert find_max([]) is None\n"}
{"input": "def fahrenheit_to_celsius(f):\n    return (f - 32) * 5/9", "output": "import pytest\n\n\ndef test_fahrenheit_to_celsius():\n    assert fahrenheit_to_celsius(32) == 0\n    assert fahrenheit_to_celsius(212) == 100\n"}
{"input": "def is_valid_url(url):\n    import re\n    pattern = r'^https?:\\/\\/(?:www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b(?:[-a-zA-Z0-9()@:%_\\+.~#?&\\/=]*)$'\n    return bool(re.match(pattern, url))", "output": "import pytest\n\n\ndef test_is_valid_url():\n    assert is_valid_url('https://example.com') is True\n    assert is_valid_url('invalid') is False\n"}
{"input": "def factorial(n):\n    if n <= 1:\n        return 1\n    return n * factorial(n-1)", "output": "import pytest\n\n\ndef test_factorial():\n    assert factorial(0) == 1\n    assert factorial(5) == 120\n"}
{"input": "def is_valid_url(url):\n    import re\n    pattern = r'^https?:\\/\\/(?:www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b(?:[-a-zA-Z0-9()@:%_\\+.~#?&\\/=]*)$'\n    return bool(re.match(pattern, url))", "output": "import pytest\n\n\ndef test_is_valid_url():\n    assert is_valid_url('https://example.com') is True\n    assert is_valid_url('invalid') is False\n"}
{"input": "def subtract(num1, num2):\n    return a - b", "output": "import pytest\n\n\ndef test_subtract():\n    assert subtract(5, 3) == 2\n    assert subtract(0, 5) == -5\n"}
{"input": "def add(x, y):\n    return a + b", "output": "import pytest\n\n\ndef test_add():\n    assert add(2, 3) == 5\n    assert add(-1, 1) == 0\n    assert add(0, 0) == 0\n"}
{"input": "def divide(a, b):\n    return a / b if b != 0 else None", "output": "import pytest\n\n\ndef test_divide():\n    assert divide(10, 2) == 5\n    assert divide(5, 2) == 2.5\n    assert divide(5, 0) is None\n"}
{"input": "def get_environment_variable(name):\n    import os\n    return os.environ.get(name)", "output": "import pytest\n\n\ndef test_get_environment_variable():\n    import os\n    os.environ['TEST_VAR'] = 'test_value'\n    assert get_environment_variable('TEST_VAR') == 'test_value'\n    assert get_environment_variable('NONEXISTENT') is None\n"}
{"input": "def find_min(lst):\n    return min(lst) if lst else None", "output": "import pytest\n\n\ndef test_find_min():\n    assert find_min([5, 2, 8, 1, 9]) == 1\n    assert find_min([]) is None\n"}
{"input": "def remove_duplicates(lst):\n    return list(dict.fromkeys(lst))", "output": "import pytest\n\n\ndef test_remove_duplicates():\n    assert remove_duplicates([1, 2, 2, 3, 3, 3]) == [1, 2, 3]\n    assert remove_duplicates([]) == []\n"}
{"input": "def celsius_to_fahrenheit(c):\n    return (c * 9/5) + 32", "output": "import pytest\n\n\ndef test_celsius_to_fahrenheit():\n    assert celsius_to_fahrenheit(0) == 32\n    assert celsius_to_fahrenheit(100) == 212\n"}
{"input": "def add(num1, num2):\n    return a + b", "output": "import pytest\n\n\ndef test_add():\n    assert add(2, 3) == 5\n    assert add(-1, 1) == 0\n    assert add(0, 0) == 0\n"}
{"input": "def invert_dict(d):\n    return {v: k for k, v in d.items()}", "output": "import pytest\n\n\ndef test_invert_dict():\n    assert invert_dict({'a': 1, 'b': 2}) == {1: 'a', 2: 'b'}\n    assert invert_dict({}) == {}\n"}
{"input": "def generate_random_string(length=8):\n    import random\n    import string\n    return ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(length))", "output": "import pytest\n\n\ndef test_generate_random_string():\n    result = generate_random_string(10)\n    assert len(result) == 10\n    assert isinstance(result, str)\n"}
{"input": "def subtract(x, y):\n    return a - b", "output": "import pytest\n\n\ndef test_subtract():\n    assert subtract(5, 3) == 2\n    assert subtract(0, 5) == -5\n"}
{"input": "def add(a, b):\n    return a + b", "output": "import pytest\n\n\ndef test_add():\n    assert add(2, 3) == 5\n    assert add(-1, 1) == 0\n    assert add(0, 0) == 0\n"}
{"input": "def is_valid_email(email):\n    import re\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    return bool(re.match(pattern, email))", "output": "import pytest\n\n\ndef test_is_valid_email():\n    assert is_valid_email('test@example.com') is True\n    assert is_valid_email('invalid') is False\n"}
{"input": "def multiply(x, y):\n    return a * b", "output": "import pytest\n\n\ndef test_multiply():\n    assert multiply(3, 4) == 12\n    assert multiply(-2, 3) == -6\n"}
{"input": "def generate_random_string(length=8):\n    import random\n    import string\n    return ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(length))", "output": "import pytest\n\n\ndef test_generate_random_string():\n    result = generate_random_string(10)\n    assert len(result) == 10\n    assert isinstance(result, str)\n"}
{"input": "def is_palindrome(s):\n    s = ''.join(c for c in s if c.isalnum()).lower()\n    return s == s[::-1]", "output": "import pytest\n\n\ndef test_is_palindrome():\n    assert is_palindrome('racecar') is True\n    assert is_palindrome('hello') is False\n"}
